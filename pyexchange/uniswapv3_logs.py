# This file is part of Maker Keeper Framework.
#
# Copyright (C) 2021 MikeHathaway
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

from hexbytes import HexBytes
from typing import List
from pymaker import Receipt

from eth_abi.codec import ABICodec
from eth_abi.registry import registry as default_registry
from web3._utils.events import get_event_data
from web3.types import EventData


# TODO: move this to pymaker and add tests
# TODO: paramaterize abi as well, as opposed to hardcoding to position manager
# TODO: figure out how to handle arbitrary event shapes -> conform to common interface (from_log)
class LogEvent:
    """ subclass this method with a given events shape """
    @staticmethod
    def from_event_data(self, event_data: EventData):
        assert (isinstance(event_data, EventData))
        raise NotImplementedError


# def get_logs_from_receipt(self, receipt: Receipt, topics: List[HexBytes], event_names: List[str],
#                           log_class: LogEvent) -> List:
#     """ Retrieve method call return data from log events
#         topic can be generated by running on seth CLI:  seth keccak $(seth --from-ascii "{event_name}({method_signature})")
#     """
#     assert (isinstance(receipt, Receipt))
#     assert (isinstance(topics, List))
#     assert (isinstance(event_names, str))
#     # assert (isinstance(log_class, LogEvent))
#
#     logs = []
#
#     if receipt.logs is not None:
#         for log in receipt.logs:
#             for topic in topics:
#                 if len(log['topics']) > -1 and log['topics'][0] == topic:
#                     for event_name in event_names:
#                         log_event_abi = \
#                         [abi for abi in self.NonfungiblePositionManager_abi if abi.get('name') == event_name][-1]
#                         codec = ABICodec(default_registry)
#                         event_data = get_event_data(codec, log_event_abi, log)
#
#                         logs.append(log_class.from_event_data(event_data))
#
#     return logs


class LogIncreaseLiquidity:
    """ seth keccak $(seth --from-ascii "IncreaseLiquidity(uint256,uint128,uint256,uint256)") == 0x3067048beee31b25b2f1681f88dac838c8bba36af25bfb2b7cf7473a5847e35f

        mint and increaseLiquidity methods emit the same IncreaseLiquidity event
    """
    def __init__(self, log):
        self.token_id = log["args"]["tokenId"]
        self.liquidity = log["args"]["liquidity"]
        self.amount_0 = log["args"]["amount0"]
        self.amount_1 = log["args"]["amount1"]

    @classmethod
    def from_receipt(cls, contract_abi: List, receipt: Receipt):
        assert (isinstance(contract_abi, List))
        assert (isinstance(receipt, Receipt))

        liquidity_logs = []

        if receipt.logs is not None:
            for log in receipt.logs:
                if len(log['topics']) > 0 and log['topics'][0] == HexBytes('0x3067048beee31b25b2f1681f88dac838c8bba36af25bfb2b7cf7473a5847e35f'):
                    log_increase_liquidity_abi = [abi for abi in contract_abi if abi.get('name') == 'IncreaseLiquidity'][0]
                    codec = ABICodec(default_registry)
                    event_data = get_event_data(codec, log_increase_liquidity_abi, log)

                    liquidity_logs.append(LogIncreaseLiquidity(event_data))

        return liquidity_logs


class LogDecreaseLiquidity:
    """ seth keccak $(seth --from-ascii "DecreaseLiquidity(uint256,uint128,uint256,uint256)") == 0x26f6a048ee9138f2c0ce266f322cb99228e8d619ae2bff30c67f8dcf9d2377b4

        burn and decreaseLiquidity methods emit the same DecreaseLiquidity event
    """
    def __init__(self, log):
        self.token_id = log["args"]["tokenId"]
        self.liquidity = log["args"]["liquidity"]
        self.amount_0 = log["args"]["amount0"]
        self.amount_1 = log["args"]["amount1"]

    @classmethod
    def from_receipt(cls, contract_abi: List, receipt: Receipt):
        assert (isinstance(contract_abi, List))
        assert (isinstance(receipt, Receipt))

        liquidity_logs = []

        if receipt.logs is not None:
            for log in receipt.logs:
                if len(log['topics']) > 0 and log['topics'][0] == HexBytes(
                        '0x26f6a048ee9138f2c0ce266f322cb99228e8d619ae2bff30c67f8dcf9d2377b4'):
                    log_decrease_liquidity_abi = [abi for abi in contract_abi if abi.get('name') == 'DecreaseLiquidity'][0]
                    codec = ABICodec(default_registry)
                    event_data = get_event_data(codec, log_decrease_liquidity_abi, log)

                    liquidity_logs.append(LogDecreaseLiquidity(event_data))

        return liquidity_logs


class LogCollect:
    """ seth keccak $(seth --from-ascii "Collect(uint256,address,uint256,uint256)") == 0x40d0efd1a53d60ecbf40971b9daf7dc90178c3aadc7aab1765632738fa8b8f01
    """
    def __init__(self, log):
        self.token_id = log["args"]["tokenId"]
        self.recipient = log["args"]["recipient"]
        self.amount_0 = log["args"]["amount0"]
        self.amount_1 = log["args"]["amount1"]

    @classmethod
    def from_receipt(cls, contract_abi: List, receipt: Receipt):
        assert (isinstance(contract_abi, List))
        assert (isinstance(receipt, Receipt))

        liquidity_logs = []

        if receipt.logs is not None:
            for log in receipt.logs:
                if len(log['topics']) > 0 and log['topics'][0] == HexBytes(
                        '0x40d0efd1a53d60ecbf40971b9daf7dc90178c3aadc7aab1765632738fa8b8f01'):
                    log_collect_abi = [abi for abi in contract_abi if abi.get('name') == 'Collect'][0]
                    codec = ABICodec(default_registry)
                    event_data = get_event_data(codec, log_collect_abi, log)

                    liquidity_logs.append(LogCollect(event_data))

        return liquidity_logs
